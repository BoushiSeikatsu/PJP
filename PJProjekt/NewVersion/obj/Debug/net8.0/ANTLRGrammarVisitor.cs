//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from E:\Python Scripts\PJP_Project\PJProjekt\NewVersion\ANTLRGrammar.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace NewVersion {
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="ANTLRGrammarParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public interface IANTLRGrammarVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by the <c>declaration</c>
	/// labeled alternative in <see cref="ANTLRGrammarParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDeclaration([NotNull] ANTLRGrammarParser.DeclarationContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>emptyStatement</c>
	/// labeled alternative in <see cref="ANTLRGrammarParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitEmptyStatement([NotNull] ANTLRGrammarParser.EmptyStatementContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>printExpr</c>
	/// labeled alternative in <see cref="ANTLRGrammarParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPrintExpr([NotNull] ANTLRGrammarParser.PrintExprContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>readId</c>
	/// labeled alternative in <see cref="ANTLRGrammarParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitReadId([NotNull] ANTLRGrammarParser.ReadIdContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>writeId</c>
	/// labeled alternative in <see cref="ANTLRGrammarParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitWriteId([NotNull] ANTLRGrammarParser.WriteIdContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>blockStatements</c>
	/// labeled alternative in <see cref="ANTLRGrammarParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBlockStatements([NotNull] ANTLRGrammarParser.BlockStatementsContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>condStatement</c>
	/// labeled alternative in <see cref="ANTLRGrammarParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCondStatement([NotNull] ANTLRGrammarParser.CondStatementContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>whileLoopStatement</c>
	/// labeled alternative in <see cref="ANTLRGrammarParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitWhileLoopStatement([NotNull] ANTLRGrammarParser.WhileLoopStatementContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>doWhile</c>
	/// labeled alternative in <see cref="ANTLRGrammarParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDoWhile([NotNull] ANTLRGrammarParser.DoWhileContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>arNegation</c>
	/// labeled alternative in <see cref="ANTLRGrammarParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitArNegation([NotNull] ANTLRGrammarParser.ArNegationContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>lgNegation</c>
	/// labeled alternative in <see cref="ANTLRGrammarParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLgNegation([NotNull] ANTLRGrammarParser.LgNegationContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>mulDiv</c>
	/// labeled alternative in <see cref="ANTLRGrammarParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitMulDiv([NotNull] ANTLRGrammarParser.MulDivContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>modulo</c>
	/// labeled alternative in <see cref="ANTLRGrammarParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitModulo([NotNull] ANTLRGrammarParser.ModuloContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>addSub</c>
	/// labeled alternative in <see cref="ANTLRGrammarParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAddSub([NotNull] ANTLRGrammarParser.AddSubContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>concat</c>
	/// labeled alternative in <see cref="ANTLRGrammarParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitConcat([NotNull] ANTLRGrammarParser.ConcatContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>compare</c>
	/// labeled alternative in <see cref="ANTLRGrammarParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCompare([NotNull] ANTLRGrammarParser.CompareContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>equality</c>
	/// labeled alternative in <see cref="ANTLRGrammarParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitEquality([NotNull] ANTLRGrammarParser.EqualityContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>logicalAnd</c>
	/// labeled alternative in <see cref="ANTLRGrammarParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLogicalAnd([NotNull] ANTLRGrammarParser.LogicalAndContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>logicalOr</c>
	/// labeled alternative in <see cref="ANTLRGrammarParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLogicalOr([NotNull] ANTLRGrammarParser.LogicalOrContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>int</c>
	/// labeled alternative in <see cref="ANTLRGrammarParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitInt([NotNull] ANTLRGrammarParser.IntContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>id</c>
	/// labeled alternative in <see cref="ANTLRGrammarParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitId([NotNull] ANTLRGrammarParser.IdContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>float</c>
	/// labeled alternative in <see cref="ANTLRGrammarParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFloat([NotNull] ANTLRGrammarParser.FloatContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>string</c>
	/// labeled alternative in <see cref="ANTLRGrammarParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitString([NotNull] ANTLRGrammarParser.StringContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>bool</c>
	/// labeled alternative in <see cref="ANTLRGrammarParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBool([NotNull] ANTLRGrammarParser.BoolContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>parens</c>
	/// labeled alternative in <see cref="ANTLRGrammarParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParens([NotNull] ANTLRGrammarParser.ParensContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>assignment</c>
	/// labeled alternative in <see cref="ANTLRGrammarParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAssignment([NotNull] ANTLRGrammarParser.AssignmentContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ANTLRGrammarParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitProgram([NotNull] ANTLRGrammarParser.ProgramContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ANTLRGrammarParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStatement([NotNull] ANTLRGrammarParser.StatementContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ANTLRGrammarParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpr([NotNull] ANTLRGrammarParser.ExprContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="ANTLRGrammarParser.primitiveType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPrimitiveType([NotNull] ANTLRGrammarParser.PrimitiveTypeContext context);
}
} // namespace NewVersion

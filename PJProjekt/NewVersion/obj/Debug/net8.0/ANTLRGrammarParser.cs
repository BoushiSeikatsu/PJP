//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from E:\Python Scripts\PJP_Project\PJProjekt\NewVersion\ANTLRGrammar.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace NewVersion {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class ANTLRGrammarParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, INT_KEYWORD=5, FLOAT_KEYWORD=6, BOOL_KEYWORD=7, 
		STRING_KEYWORD=8, IF=9, ELSE=10, READ=11, WRITE=12, DO=13, WHILE=14, SEMI=15, 
		COMMA=16, DOT=17, NOT=18, MOD=19, MUL=20, DIV=21, ADD=22, SUB=23, ASSIGNMENT=24, 
		COMPARER=25, EQUALITY=26, LOGICALOR=27, LOGICALAND=28, BOOL=29, STRING=30, 
		IDENTIFIER=31, FLOAT=32, INT=33, WS=34, COMMENT=35, LINE_COMMENT=36;
	public const int
		RULE_program = 0, RULE_statement = 1, RULE_expr = 2, RULE_primitiveType = 3;
	public static readonly string[] ruleNames = {
		"program", "statement", "expr", "primitiveType"
	};

	private static readonly string[] _LiteralNames = {
		null, "'{'", "'}'", "'('", "')'", "'int'", "'float'", "'bool'", "'string'", 
		"'if'", "'else'", "'read'", "'write'", "'do'", "'while'", "';'", "','", 
		"'.'", "'!'", "'%'", "'*'", "'/'", "'+'", "'-'", "'='", null, null, "'||'", 
		"'&&'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, "INT_KEYWORD", "FLOAT_KEYWORD", "BOOL_KEYWORD", 
		"STRING_KEYWORD", "IF", "ELSE", "READ", "WRITE", "DO", "WHILE", "SEMI", 
		"COMMA", "DOT", "NOT", "MOD", "MUL", "DIV", "ADD", "SUB", "ASSIGNMENT", 
		"COMPARER", "EQUALITY", "LOGICALOR", "LOGICALAND", "BOOL", "STRING", "IDENTIFIER", 
		"FLOAT", "INT", "WS", "COMMENT", "LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ANTLRGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public ANTLRGrammarParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRGrammarVisitor<TResult> typedVisitor = visitor as IANTLRGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 8; statement();
				}
				}
				State = 11;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << INT_KEYWORD) | (1L << FLOAT_KEYWORD) | (1L << BOOL_KEYWORD) | (1L << STRING_KEYWORD) | (1L << IF) | (1L << READ) | (1L << WRITE) | (1L << DO) | (1L << WHILE) | (1L << SEMI) | (1L << NOT) | (1L << SUB) | (1L << BOOL) | (1L << STRING) | (1L << IDENTIFIER) | (1L << FLOAT) | (1L << INT))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DeclarationContext : StatementContext {
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public ITerminalNode[] IDENTIFIER() { return GetTokens(ANTLRGrammarParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(ANTLRGrammarParser.IDENTIFIER, i);
		}
		public DeclarationContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRGrammarVisitor<TResult> typedVisitor = visitor as IANTLRGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EmptyStatementContext : StatementContext {
		public ITerminalNode SEMI() { return GetToken(ANTLRGrammarParser.SEMI, 0); }
		public EmptyStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.EnterEmptyStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.ExitEmptyStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRGrammarVisitor<TResult> typedVisitor = visitor as IANTLRGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrintExprContext : StatementContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public PrintExprContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.EnterPrintExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.ExitPrintExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRGrammarVisitor<TResult> typedVisitor = visitor as IANTLRGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReadIdContext : StatementContext {
		public ITerminalNode READ() { return GetToken(ANTLRGrammarParser.READ, 0); }
		public ITerminalNode[] IDENTIFIER() { return GetTokens(ANTLRGrammarParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(ANTLRGrammarParser.IDENTIFIER, i);
		}
		public ReadIdContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.EnterReadId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.ExitReadId(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRGrammarVisitor<TResult> typedVisitor = visitor as IANTLRGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReadId(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WriteIdContext : StatementContext {
		public ITerminalNode WRITE() { return GetToken(ANTLRGrammarParser.WRITE, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public WriteIdContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.EnterWriteId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.ExitWriteId(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRGrammarVisitor<TResult> typedVisitor = visitor as IANTLRGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWriteId(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BlockStatementsContext : StatementContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockStatementsContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.EnterBlockStatements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.ExitBlockStatements(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRGrammarVisitor<TResult> typedVisitor = visitor as IANTLRGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStatements(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CondStatementContext : StatementContext {
		public ITerminalNode IF() { return GetToken(ANTLRGrammarParser.IF, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(ANTLRGrammarParser.ELSE, 0); }
		public CondStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.EnterCondStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.ExitCondStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRGrammarVisitor<TResult> typedVisitor = visitor as IANTLRGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WhileLoopStatementContext : StatementContext {
		public ITerminalNode WHILE() { return GetToken(ANTLRGrammarParser.WHILE, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public WhileLoopStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.EnterWhileLoopStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.ExitWhileLoopStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRGrammarVisitor<TResult> typedVisitor = visitor as IANTLRGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileLoopStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DoWhileContext : StatementContext {
		public ITerminalNode DO() { return GetToken(ANTLRGrammarParser.DO, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ITerminalNode WHILE() { return GetToken(ANTLRGrammarParser.WHILE, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public DoWhileContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.EnterDoWhile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.ExitDoWhile(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRGrammarVisitor<TResult> typedVisitor = visitor as IANTLRGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDoWhile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_statement);
		int _la;
		try {
			State = 80;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case INT_KEYWORD:
			case FLOAT_KEYWORD:
			case BOOL_KEYWORD:
			case STRING_KEYWORD:
				_localctx = new DeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 13; primitiveType();
				State = 14; Match(IDENTIFIER);
				State = 19;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 15; Match(COMMA);
					State = 16; Match(IDENTIFIER);
					}
					}
					State = 21;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 22; Match(SEMI);
				}
				break;
			case SEMI:
				_localctx = new EmptyStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 24; Match(SEMI);
				}
				break;
			case T__2:
			case NOT:
			case SUB:
			case BOOL:
			case STRING:
			case IDENTIFIER:
			case FLOAT:
			case INT:
				_localctx = new PrintExprContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 25; expr(0);
				State = 26; Match(SEMI);
				}
				break;
			case READ:
				_localctx = new ReadIdContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 28; Match(READ);
				State = 29; Match(IDENTIFIER);
				State = 34;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 30; Match(COMMA);
					State = 31; Match(IDENTIFIER);
					}
					}
					State = 36;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 37; Match(SEMI);
				}
				break;
			case WRITE:
				_localctx = new WriteIdContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 38; Match(WRITE);
				State = 39; expr(0);
				State = 44;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 40; Match(COMMA);
					State = 41; expr(0);
					}
					}
					State = 46;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 47; Match(SEMI);
				}
				break;
			case T__0:
				_localctx = new BlockStatementsContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 49; Match(T__0);
				State = 51;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 50; statement();
					}
					}
					State = 53;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << INT_KEYWORD) | (1L << FLOAT_KEYWORD) | (1L << BOOL_KEYWORD) | (1L << STRING_KEYWORD) | (1L << IF) | (1L << READ) | (1L << WRITE) | (1L << DO) | (1L << WHILE) | (1L << SEMI) | (1L << NOT) | (1L << SUB) | (1L << BOOL) | (1L << STRING) | (1L << IDENTIFIER) | (1L << FLOAT) | (1L << INT))) != 0) );
				State = 55; Match(T__1);
				}
				break;
			case IF:
				_localctx = new CondStatementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 57; Match(IF);
				State = 58; Match(T__2);
				State = 59; expr(0);
				State = 60; Match(T__3);
				State = 61; statement();
				State = 64;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
				case 1:
					{
					State = 62; Match(ELSE);
					State = 63; statement();
					}
					break;
				}
				}
				break;
			case WHILE:
				_localctx = new WhileLoopStatementContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 66; Match(WHILE);
				State = 67; Match(T__2);
				State = 68; expr(0);
				State = 69; Match(T__3);
				State = 70; statement();
				}
				break;
			case DO:
				_localctx = new DoWhileContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 72; Match(DO);
				State = 73; statement();
				State = 74; Match(WHILE);
				State = 75; Match(T__2);
				State = 76; expr(0);
				State = 77; Match(T__3);
				State = 78; Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ParensContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ParensContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.EnterParens(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.ExitParens(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRGrammarVisitor<TResult> typedVisitor = visitor as IANTLRGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParens(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArNegationContext : ExprContext {
		public IToken op;
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode SUB() { return GetToken(ANTLRGrammarParser.SUB, 0); }
		public ArNegationContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.EnterArNegation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.ExitArNegation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRGrammarVisitor<TResult> typedVisitor = visitor as IANTLRGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArNegation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LgNegationContext : ExprContext {
		public IToken op;
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(ANTLRGrammarParser.NOT, 0); }
		public LgNegationContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.EnterLgNegation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.ExitLgNegation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRGrammarVisitor<TResult> typedVisitor = visitor as IANTLRGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLgNegation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MulDivContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode MUL() { return GetToken(ANTLRGrammarParser.MUL, 0); }
		public ITerminalNode DIV() { return GetToken(ANTLRGrammarParser.DIV, 0); }
		public MulDivContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.EnterMulDiv(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.ExitMulDiv(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRGrammarVisitor<TResult> typedVisitor = visitor as IANTLRGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulDiv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ModuloContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode MOD() { return GetToken(ANTLRGrammarParser.MOD, 0); }
		public ModuloContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.EnterModulo(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.ExitModulo(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRGrammarVisitor<TResult> typedVisitor = visitor as IANTLRGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModulo(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddSubContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode ADD() { return GetToken(ANTLRGrammarParser.ADD, 0); }
		public ITerminalNode SUB() { return GetToken(ANTLRGrammarParser.SUB, 0); }
		public AddSubContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.EnterAddSub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.ExitAddSub(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRGrammarVisitor<TResult> typedVisitor = visitor as IANTLRGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddSub(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConcatContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode DOT() { return GetToken(ANTLRGrammarParser.DOT, 0); }
		public ConcatContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.EnterConcat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.ExitConcat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRGrammarVisitor<TResult> typedVisitor = visitor as IANTLRGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConcat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CompareContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode COMPARER() { return GetToken(ANTLRGrammarParser.COMPARER, 0); }
		public CompareContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.EnterCompare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.ExitCompare(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRGrammarVisitor<TResult> typedVisitor = visitor as IANTLRGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompare(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode EQUALITY() { return GetToken(ANTLRGrammarParser.EQUALITY, 0); }
		public EqualityContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.EnterEquality(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.ExitEquality(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRGrammarVisitor<TResult> typedVisitor = visitor as IANTLRGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquality(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalAndContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode LOGICALAND() { return GetToken(ANTLRGrammarParser.LOGICALAND, 0); }
		public LogicalAndContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.EnterLogicalAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.ExitLogicalAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRGrammarVisitor<TResult> typedVisitor = visitor as IANTLRGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalOrContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode LOGICALOR() { return GetToken(ANTLRGrammarParser.LOGICALOR, 0); }
		public LogicalOrContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.EnterLogicalOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.ExitLogicalOr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRGrammarVisitor<TResult> typedVisitor = visitor as IANTLRGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntContext : ExprContext {
		public ITerminalNode INT() { return GetToken(ANTLRGrammarParser.INT, 0); }
		public IntContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.EnterInt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.ExitInt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRGrammarVisitor<TResult> typedVisitor = visitor as IANTLRGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdContext : ExprContext {
		public ITerminalNode IDENTIFIER() { return GetToken(ANTLRGrammarParser.IDENTIFIER, 0); }
		public IdContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.EnterId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.ExitId(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRGrammarVisitor<TResult> typedVisitor = visitor as IANTLRGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitId(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FloatContext : ExprContext {
		public ITerminalNode FLOAT() { return GetToken(ANTLRGrammarParser.FLOAT, 0); }
		public FloatContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.EnterFloat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.ExitFloat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRGrammarVisitor<TResult> typedVisitor = visitor as IANTLRGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringContext : ExprContext {
		public ITerminalNode STRING() { return GetToken(ANTLRGrammarParser.STRING, 0); }
		public StringContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRGrammarVisitor<TResult> typedVisitor = visitor as IANTLRGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolContext : ExprContext {
		public ITerminalNode BOOL() { return GetToken(ANTLRGrammarParser.BOOL, 0); }
		public BoolContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.EnterBool(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.ExitBool(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRGrammarVisitor<TResult> typedVisitor = visitor as IANTLRGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentContext : ExprContext {
		public ITerminalNode IDENTIFIER() { return GetToken(ANTLRGrammarParser.IDENTIFIER, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AssignmentContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRGrammarVisitor<TResult> typedVisitor = visitor as IANTLRGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(_ctx, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 99;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
			case 1:
				{
				_localctx = new ParensContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 83; Match(T__2);
				State = 84; expr(0);
				State = 85; Match(T__3);
				}
				break;

			case 2:
				{
				_localctx = new ArNegationContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				{
				State = 87; ((ArNegationContext)_localctx).op = Match(SUB);
				}
				State = 88; expr(16);
				}
				break;

			case 3:
				{
				_localctx = new LgNegationContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				{
				State = 89; ((LgNegationContext)_localctx).op = Match(NOT);
				}
				State = 90; expr(15);
				}
				break;

			case 4:
				{
				_localctx = new IntContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 91; Match(INT);
				}
				break;

			case 5:
				{
				_localctx = new IdContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 92; Match(IDENTIFIER);
				}
				break;

			case 6:
				{
				_localctx = new FloatContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 93; Match(FLOAT);
				}
				break;

			case 7:
				{
				_localctx = new StringContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 94; Match(STRING);
				}
				break;

			case 8:
				{
				_localctx = new BoolContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 95; Match(BOOL);
				}
				break;

			case 9:
				{
				_localctx = new AssignmentContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 96; Match(IDENTIFIER);
				State = 97; Match(ASSIGNMENT);
				State = 98; expr(1);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 127;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 125;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,8,_ctx) ) {
					case 1:
						{
						_localctx = new MulDivContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 101;
						if (!(Precpred(_ctx, 14))) throw new FailedPredicateException(this, "Precpred(_ctx, 14)");
						State = 102;
						((MulDivContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==MUL || _la==DIV) ) {
							((MulDivContext)_localctx).op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 103; expr(15);
						}
						break;

					case 2:
						{
						_localctx = new ModuloContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 104;
						if (!(Precpred(_ctx, 13))) throw new FailedPredicateException(this, "Precpred(_ctx, 13)");
						State = 105; Match(MOD);
						State = 106; expr(14);
						}
						break;

					case 3:
						{
						_localctx = new AddSubContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 107;
						if (!(Precpred(_ctx, 12))) throw new FailedPredicateException(this, "Precpred(_ctx, 12)");
						State = 108;
						((AddSubContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==ADD || _la==SUB) ) {
							((AddSubContext)_localctx).op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 109; expr(13);
						}
						break;

					case 4:
						{
						_localctx = new ConcatContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 110;
						if (!(Precpred(_ctx, 11))) throw new FailedPredicateException(this, "Precpred(_ctx, 11)");
						State = 111; Match(DOT);
						State = 112; expr(12);
						}
						break;

					case 5:
						{
						_localctx = new CompareContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 113;
						if (!(Precpred(_ctx, 10))) throw new FailedPredicateException(this, "Precpred(_ctx, 10)");
						{
						State = 114; ((CompareContext)_localctx).op = Match(COMPARER);
						}
						State = 115; expr(11);
						}
						break;

					case 6:
						{
						_localctx = new EqualityContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 116;
						if (!(Precpred(_ctx, 9))) throw new FailedPredicateException(this, "Precpred(_ctx, 9)");
						{
						State = 117; ((EqualityContext)_localctx).op = Match(EQUALITY);
						}
						State = 118; expr(10);
						}
						break;

					case 7:
						{
						_localctx = new LogicalAndContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 119;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						{
						State = 120; ((LogicalAndContext)_localctx).op = Match(LOGICALAND);
						}
						State = 121; expr(9);
						}
						break;

					case 8:
						{
						_localctx = new LogicalOrContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 122;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						{
						State = 123; ((LogicalOrContext)_localctx).op = Match(LOGICALOR);
						}
						State = 124; expr(8);
						}
						break;
					}
					} 
				}
				State = 129;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,9,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		public IToken type;
		public ITerminalNode INT_KEYWORD() { return GetToken(ANTLRGrammarParser.INT_KEYWORD, 0); }
		public ITerminalNode FLOAT_KEYWORD() { return GetToken(ANTLRGrammarParser.FLOAT_KEYWORD, 0); }
		public ITerminalNode BOOL_KEYWORD() { return GetToken(ANTLRGrammarParser.BOOL_KEYWORD, 0); }
		public ITerminalNode STRING_KEYWORD() { return GetToken(ANTLRGrammarParser.STRING_KEYWORD, 0); }
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.EnterPrimitiveType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.ExitPrimitiveType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRGrammarVisitor<TResult> typedVisitor = visitor as IANTLRGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_primitiveType);
		try {
			State = 134;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case INT_KEYWORD:
				EnterOuterAlt(_localctx, 1);
				{
				State = 130; _localctx.type = Match(INT_KEYWORD);
				}
				break;
			case FLOAT_KEYWORD:
				EnterOuterAlt(_localctx, 2);
				{
				State = 131; _localctx.type = Match(FLOAT_KEYWORD);
				}
				break;
			case BOOL_KEYWORD:
				EnterOuterAlt(_localctx, 3);
				{
				State = 132; _localctx.type = Match(BOOL_KEYWORD);
				}
				break;
			case STRING_KEYWORD:
				EnterOuterAlt(_localctx, 4);
				{
				State = 133; _localctx.type = Match(STRING_KEYWORD);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 2: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 14);

		case 1: return Precpred(_ctx, 13);

		case 2: return Precpred(_ctx, 12);

		case 3: return Precpred(_ctx, 11);

		case 4: return Precpred(_ctx, 10);

		case 5: return Precpred(_ctx, 9);

		case 6: return Precpred(_ctx, 8);

		case 7: return Precpred(_ctx, 7);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3&\x8B\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x3\x2\x6\x2\f\n\x2\r\x2\xE\x2\r\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\a\x3\x14\n\x3\f\x3\xE\x3\x17\v\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\a\x3#\n\x3\f\x3\xE\x3&\v\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\a\x3-\n\x3\f\x3\xE\x3\x30\v\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x6\x3\x36\n\x3\r\x3\xE\x3\x37\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3\x43\n\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3S\n"+
		"\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x5\x4\x66\n\x4\x3\x4\x3\x4\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3"+
		"\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\x3\x4\a\x4\x80\n\x4"+
		"\f\x4\xE\x4\x83\v\x4\x3\x5\x3\x5\x3\x5\x3\x5\x5\x5\x89\n\x5\x3\x5\x2\x2"+
		"\x3\x6\x6\x2\x2\x4\x2\x6\x2\b\x2\x2\x4\x3\x2\x16\x17\x3\x2\x18\x19\xA7"+
		"\x2\v\x3\x2\x2\x2\x4R\x3\x2\x2\x2\x6\x65\x3\x2\x2\x2\b\x88\x3\x2\x2\x2"+
		"\n\f\x5\x4\x3\x2\v\n\x3\x2\x2\x2\f\r\x3\x2\x2\x2\r\v\x3\x2\x2\x2\r\xE"+
		"\x3\x2\x2\x2\xE\x3\x3\x2\x2\x2\xF\x10\x5\b\x5\x2\x10\x15\a!\x2\x2\x11"+
		"\x12\a\x12\x2\x2\x12\x14\a!\x2\x2\x13\x11\x3\x2\x2\x2\x14\x17\x3\x2\x2"+
		"\x2\x15\x13\x3\x2\x2\x2\x15\x16\x3\x2\x2\x2\x16\x18\x3\x2\x2\x2\x17\x15"+
		"\x3\x2\x2\x2\x18\x19\a\x11\x2\x2\x19S\x3\x2\x2\x2\x1AS\a\x11\x2\x2\x1B"+
		"\x1C\x5\x6\x4\x2\x1C\x1D\a\x11\x2\x2\x1DS\x3\x2\x2\x2\x1E\x1F\a\r\x2\x2"+
		"\x1F$\a!\x2\x2 !\a\x12\x2\x2!#\a!\x2\x2\" \x3\x2\x2\x2#&\x3\x2\x2\x2$"+
		"\"\x3\x2\x2\x2$%\x3\x2\x2\x2%\'\x3\x2\x2\x2&$\x3\x2\x2\x2\'S\a\x11\x2"+
		"\x2()\a\xE\x2\x2).\x5\x6\x4\x2*+\a\x12\x2\x2+-\x5\x6\x4\x2,*\x3\x2\x2"+
		"\x2-\x30\x3\x2\x2\x2.,\x3\x2\x2\x2./\x3\x2\x2\x2/\x31\x3\x2\x2\x2\x30"+
		".\x3\x2\x2\x2\x31\x32\a\x11\x2\x2\x32S\x3\x2\x2\x2\x33\x35\a\x3\x2\x2"+
		"\x34\x36\x5\x4\x3\x2\x35\x34\x3\x2\x2\x2\x36\x37\x3\x2\x2\x2\x37\x35\x3"+
		"\x2\x2\x2\x37\x38\x3\x2\x2\x2\x38\x39\x3\x2\x2\x2\x39:\a\x4\x2\x2:S\x3"+
		"\x2\x2\x2;<\a\v\x2\x2<=\a\x5\x2\x2=>\x5\x6\x4\x2>?\a\x6\x2\x2?\x42\x5"+
		"\x4\x3\x2@\x41\a\f\x2\x2\x41\x43\x5\x4\x3\x2\x42@\x3\x2\x2\x2\x42\x43"+
		"\x3\x2\x2\x2\x43S\x3\x2\x2\x2\x44\x45\a\x10\x2\x2\x45\x46\a\x5\x2\x2\x46"+
		"G\x5\x6\x4\x2GH\a\x6\x2\x2HI\x5\x4\x3\x2IS\x3\x2\x2\x2JK\a\xF\x2\x2KL"+
		"\x5\x4\x3\x2LM\a\x10\x2\x2MN\a\x5\x2\x2NO\x5\x6\x4\x2OP\a\x6\x2\x2PQ\a"+
		"\x11\x2\x2QS\x3\x2\x2\x2R\xF\x3\x2\x2\x2R\x1A\x3\x2\x2\x2R\x1B\x3\x2\x2"+
		"\x2R\x1E\x3\x2\x2\x2R(\x3\x2\x2\x2R\x33\x3\x2\x2\x2R;\x3\x2\x2\x2R\x44"+
		"\x3\x2\x2\x2RJ\x3\x2\x2\x2S\x5\x3\x2\x2\x2TU\b\x4\x1\x2UV\a\x5\x2\x2V"+
		"W\x5\x6\x4\x2WX\a\x6\x2\x2X\x66\x3\x2\x2\x2YZ\a\x19\x2\x2Z\x66\x5\x6\x4"+
		"\x12[\\\a\x14\x2\x2\\\x66\x5\x6\x4\x11]\x66\a#\x2\x2^\x66\a!\x2\x2_\x66"+
		"\a\"\x2\x2`\x66\a \x2\x2\x61\x66\a\x1F\x2\x2\x62\x63\a!\x2\x2\x63\x64"+
		"\a\x1A\x2\x2\x64\x66\x5\x6\x4\x3\x65T\x3\x2\x2\x2\x65Y\x3\x2\x2\x2\x65"+
		"[\x3\x2\x2\x2\x65]\x3\x2\x2\x2\x65^\x3\x2\x2\x2\x65_\x3\x2\x2\x2\x65`"+
		"\x3\x2\x2\x2\x65\x61\x3\x2\x2\x2\x65\x62\x3\x2\x2\x2\x66\x81\x3\x2\x2"+
		"\x2gh\f\x10\x2\x2hi\t\x2\x2\x2i\x80\x5\x6\x4\x11jk\f\xF\x2\x2kl\a\x15"+
		"\x2\x2l\x80\x5\x6\x4\x10mn\f\xE\x2\x2no\t\x3\x2\x2o\x80\x5\x6\x4\xFpq"+
		"\f\r\x2\x2qr\a\x13\x2\x2r\x80\x5\x6\x4\xEst\f\f\x2\x2tu\a\x1B\x2\x2u\x80"+
		"\x5\x6\x4\rvw\f\v\x2\x2wx\a\x1C\x2\x2x\x80\x5\x6\x4\fyz\f\n\x2\x2z{\a"+
		"\x1E\x2\x2{\x80\x5\x6\x4\v|}\f\t\x2\x2}~\a\x1D\x2\x2~\x80\x5\x6\x4\n\x7F"+
		"g\x3\x2\x2\x2\x7Fj\x3\x2\x2\x2\x7Fm\x3\x2\x2\x2\x7Fp\x3\x2\x2\x2\x7Fs"+
		"\x3\x2\x2\x2\x7Fv\x3\x2\x2\x2\x7Fy\x3\x2\x2\x2\x7F|\x3\x2\x2\x2\x80\x83"+
		"\x3\x2\x2\x2\x81\x7F\x3\x2\x2\x2\x81\x82\x3\x2\x2\x2\x82\a\x3\x2\x2\x2"+
		"\x83\x81\x3\x2\x2\x2\x84\x89\a\a\x2\x2\x85\x89\a\b\x2\x2\x86\x89\a\t\x2"+
		"\x2\x87\x89\a\n\x2\x2\x88\x84\x3\x2\x2\x2\x88\x85\x3\x2\x2\x2\x88\x86"+
		"\x3\x2\x2\x2\x88\x87\x3\x2\x2\x2\x89\t\x3\x2\x2\x2\r\r\x15$.\x37\x42R"+
		"\x65\x7F\x81\x88";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace NewVersion

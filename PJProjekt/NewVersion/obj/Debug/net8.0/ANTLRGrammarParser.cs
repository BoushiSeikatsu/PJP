//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\msi pc\Documents\PythonProjects\PJP\PJProjekt\NewVersion\ANTLRGrammar.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace NewVersion {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class ANTLRGrammarParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, INT_KEYWORD=5, FLOAT_KEYWORD=6, BOOL_KEYWORD=7, 
		STRING_KEYWORD=8, IF=9, ELSE=10, READ=11, WRITE=12, WHILE=13, SEMI=14, 
		COMMA=15, DOT=16, NOT=17, MOD=18, MUL=19, DIV=20, ADD=21, SUB=22, ASSIGNMENT=23, 
		COMPARER=24, EQUALITY=25, LOGICALOR=26, LOGICALAND=27, STRING=28, IDENTIFIER=29, 
		FLOAT=30, INT=31, BOOL=32, WS=33;
	public const int
		RULE_program = 0, RULE_statement = 1, RULE_condition = 2, RULE_joinedCondition = 3, 
		RULE_expr = 4, RULE_primitiveType = 5;
	public static readonly string[] ruleNames = {
		"program", "statement", "condition", "joinedCondition", "expr", "primitiveType"
	};

	private static readonly string[] _LiteralNames = {
		null, "'{'", "'}'", "'('", "')'", "'int'", "'float'", "'bool'", "'string'", 
		"'if'", "'else'", "'read'", "'write'", "'while'", "';'", "','", "'.'", 
		"'!'", "'%'", "'*'", "'/'", "'+'", "'-'", "'='", null, null, "'||'", "'&&'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, "INT_KEYWORD", "FLOAT_KEYWORD", "BOOL_KEYWORD", 
		"STRING_KEYWORD", "IF", "ELSE", "READ", "WRITE", "WHILE", "SEMI", "COMMA", 
		"DOT", "NOT", "MOD", "MUL", "DIV", "ADD", "SUB", "ASSIGNMENT", "COMPARER", 
		"EQUALITY", "LOGICALOR", "LOGICALAND", "STRING", "IDENTIFIER", "FLOAT", 
		"INT", "BOOL", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ANTLRGrammar.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public ANTLRGrammarParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRGrammarVisitor<TResult> typedVisitor = visitor as IANTLRGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 13;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 12; statement();
				}
				}
				State = 15;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << INT_KEYWORD) | (1L << FLOAT_KEYWORD) | (1L << BOOL_KEYWORD) | (1L << STRING_KEYWORD) | (1L << IF) | (1L << READ) | (1L << WRITE) | (1L << WHILE) | (1L << SEMI) | (1L << NOT) | (1L << SUB) | (1L << STRING) | (1L << IDENTIFIER) | (1L << FLOAT) | (1L << INT) | (1L << BOOL))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	 
		public StatementContext() { }
		public virtual void CopyFrom(StatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class EmptyStatementContext : StatementContext {
		public ITerminalNode SEMI() { return GetToken(ANTLRGrammarParser.SEMI, 0); }
		public EmptyStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.EnterEmptyStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.ExitEmptyStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRGrammarVisitor<TResult> typedVisitor = visitor as IANTLRGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEmptyStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class WriteIdContext : StatementContext {
		public ITerminalNode WRITE() { return GetToken(ANTLRGrammarParser.WRITE, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public WriteIdContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.EnterWriteId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.ExitWriteId(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRGrammarVisitor<TResult> typedVisitor = visitor as IANTLRGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWriteId(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReadIdContext : StatementContext {
		public ITerminalNode READ() { return GetToken(ANTLRGrammarParser.READ, 0); }
		public ITerminalNode[] IDENTIFIER() { return GetTokens(ANTLRGrammarParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(ANTLRGrammarParser.IDENTIFIER, i);
		}
		public ReadIdContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.EnterReadId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.ExitReadId(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRGrammarVisitor<TResult> typedVisitor = visitor as IANTLRGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReadId(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BlockStatementsContext : StatementContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockStatementsContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.EnterBlockStatements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.ExitBlockStatements(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRGrammarVisitor<TResult> typedVisitor = visitor as IANTLRGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStatements(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LoopStatementContext : StatementContext {
		public ITerminalNode WHILE() { return GetToken(ANTLRGrammarParser.WHILE, 0); }
		public JoinedConditionContext joinedCondition() {
			return GetRuleContext<JoinedConditionContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public LoopStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.EnterLoopStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.ExitLoopStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRGrammarVisitor<TResult> typedVisitor = visitor as IANTLRGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLoopStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DeclarationContext : StatementContext {
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public ITerminalNode[] IDENTIFIER() { return GetTokens(ANTLRGrammarParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(ANTLRGrammarParser.IDENTIFIER, i);
		}
		public DeclarationContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRGrammarVisitor<TResult> typedVisitor = visitor as IANTLRGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CondStatementContext : StatementContext {
		public ITerminalNode IF() { return GetToken(ANTLRGrammarParser.IF, 0); }
		public JoinedConditionContext joinedCondition() {
			return GetRuleContext<JoinedConditionContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(ANTLRGrammarParser.ELSE, 0); }
		public CondStatementContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.EnterCondStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.ExitCondStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRGrammarVisitor<TResult> typedVisitor = visitor as IANTLRGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondStatement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrintExprContext : StatementContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public PrintExprContext(StatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.EnterPrintExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.ExitPrintExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRGrammarVisitor<TResult> typedVisitor = visitor as IANTLRGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_statement);
		int _la;
		try {
			State = 76;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case INT_KEYWORD:
			case FLOAT_KEYWORD:
			case BOOL_KEYWORD:
			case STRING_KEYWORD:
				_localctx = new DeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 17; primitiveType();
				State = 18; Match(IDENTIFIER);
				State = 23;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 19; Match(COMMA);
					State = 20; Match(IDENTIFIER);
					}
					}
					State = 25;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 26; Match(SEMI);
				}
				break;
			case SEMI:
				_localctx = new EmptyStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 28; Match(SEMI);
				}
				break;
			case T__2:
			case NOT:
			case SUB:
			case STRING:
			case IDENTIFIER:
			case FLOAT:
			case INT:
			case BOOL:
				_localctx = new PrintExprContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 29; expr(0);
				State = 30; Match(SEMI);
				}
				break;
			case READ:
				_localctx = new ReadIdContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 32; Match(READ);
				State = 33; Match(IDENTIFIER);
				State = 38;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 34; Match(COMMA);
					State = 35; Match(IDENTIFIER);
					}
					}
					State = 40;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 41; Match(SEMI);
				}
				break;
			case WRITE:
				_localctx = new WriteIdContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 42; Match(WRITE);
				State = 43; expr(0);
				State = 48;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==COMMA) {
					{
					{
					State = 44; Match(COMMA);
					State = 45; expr(0);
					}
					}
					State = 50;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				State = 51; Match(SEMI);
				}
				break;
			case T__0:
				_localctx = new BlockStatementsContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 53; Match(T__0);
				State = 55;
				_errHandler.Sync(this);
				_la = _input.La(1);
				do {
					{
					{
					State = 54; statement();
					}
					}
					State = 57;
					_errHandler.Sync(this);
					_la = _input.La(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << INT_KEYWORD) | (1L << FLOAT_KEYWORD) | (1L << BOOL_KEYWORD) | (1L << STRING_KEYWORD) | (1L << IF) | (1L << READ) | (1L << WRITE) | (1L << WHILE) | (1L << SEMI) | (1L << NOT) | (1L << SUB) | (1L << STRING) | (1L << IDENTIFIER) | (1L << FLOAT) | (1L << INT) | (1L << BOOL))) != 0) );
				State = 59; Match(T__1);
				}
				break;
			case IF:
				_localctx = new CondStatementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 61; Match(IF);
				State = 62; Match(T__2);
				State = 63; joinedCondition();
				State = 64; Match(T__3);
				State = 65; statement();
				State = 68;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,5,_ctx) ) {
				case 1:
					{
					State = 66; Match(ELSE);
					State = 67; statement();
					}
					break;
				}
				}
				break;
			case WHILE:
				_localctx = new LoopStatementContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 70; Match(WHILE);
				State = 71; Match(T__2);
				State = 72; joinedCondition();
				State = 73; Match(T__3);
				State = 74; statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
	 
		public ConditionContext() { }
		public virtual void CopyFrom(ConditionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SingleExprContext : ConditionContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public SingleExprContext(ConditionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.EnterSingleExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.ExitSingleExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRGrammarVisitor<TResult> typedVisitor = visitor as IANTLRGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultipleExprEqContext : ConditionContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode EQUALITY() { return GetToken(ANTLRGrammarParser.EQUALITY, 0); }
		public ConditionContext[] condition() {
			return GetRuleContexts<ConditionContext>();
		}
		public ConditionContext condition(int i) {
			return GetRuleContext<ConditionContext>(i);
		}
		public MultipleExprEqContext(ConditionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.EnterMultipleExprEq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.ExitMultipleExprEq(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRGrammarVisitor<TResult> typedVisitor = visitor as IANTLRGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultipleExprEq(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultipleExprCmpContext : ConditionContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode COMPARER() { return GetToken(ANTLRGrammarParser.COMPARER, 0); }
		public ConditionContext[] condition() {
			return GetRuleContexts<ConditionContext>();
		}
		public ConditionContext condition(int i) {
			return GetRuleContext<ConditionContext>(i);
		}
		public MultipleExprCmpContext(ConditionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.EnterMultipleExprCmp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.ExitMultipleExprCmp(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRGrammarVisitor<TResult> typedVisitor = visitor as IANTLRGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultipleExprCmp(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_condition);
		try {
			int _alt;
			State = 97;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,9,_ctx) ) {
			case 1:
				_localctx = new MultipleExprCmpContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 78; expr(0);
				State = 79; Match(COMPARER);
				State = 80; expr(0);
				State = 84;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,7,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 81; condition();
						}
						} 
					}
					State = 86;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,7,_ctx);
				}
				}
				break;

			case 2:
				_localctx = new MultipleExprEqContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 87; expr(0);
				State = 88; Match(EQUALITY);
				State = 89; expr(0);
				State = 93;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,8,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 90; condition();
						}
						} 
					}
					State = 95;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,8,_ctx);
				}
				}
				break;

			case 3:
				_localctx = new SingleExprContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 96; expr(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JoinedConditionContext : ParserRuleContext {
		public JoinedConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_joinedCondition; } }
	 
		public JoinedConditionContext() { }
		public virtual void CopyFrom(JoinedConditionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MultipleCondsAndContext : JoinedConditionContext {
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ITerminalNode LOGICALAND() { return GetToken(ANTLRGrammarParser.LOGICALAND, 0); }
		public JoinedConditionContext joinedCondition() {
			return GetRuleContext<JoinedConditionContext>(0);
		}
		public MultipleCondsAndContext(JoinedConditionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.EnterMultipleCondsAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.ExitMultipleCondsAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRGrammarVisitor<TResult> typedVisitor = visitor as IANTLRGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultipleCondsAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SingleCondContext : JoinedConditionContext {
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public SingleCondContext(JoinedConditionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.EnterSingleCond(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.ExitSingleCond(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRGrammarVisitor<TResult> typedVisitor = visitor as IANTLRGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleCond(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultipleCondsOrContext : JoinedConditionContext {
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ITerminalNode LOGICALOR() { return GetToken(ANTLRGrammarParser.LOGICALOR, 0); }
		public JoinedConditionContext joinedCondition() {
			return GetRuleContext<JoinedConditionContext>(0);
		}
		public MultipleCondsOrContext(JoinedConditionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.EnterMultipleCondsOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.ExitMultipleCondsOr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRGrammarVisitor<TResult> typedVisitor = visitor as IANTLRGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultipleCondsOr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JoinedConditionContext joinedCondition() {
		JoinedConditionContext _localctx = new JoinedConditionContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_joinedCondition);
		try {
			State = 108;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,10,_ctx) ) {
			case 1:
				_localctx = new MultipleCondsAndContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 99; condition();
				State = 100; Match(LOGICALAND);
				State = 101; joinedCondition();
				}
				break;

			case 2:
				_localctx = new MultipleCondsOrContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 103; condition();
				State = 104; Match(LOGICALOR);
				State = 105; joinedCondition();
				}
				break;

			case 3:
				_localctx = new SingleCondContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 107; condition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CompareContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode COMPARER() { return GetToken(ANTLRGrammarParser.COMPARER, 0); }
		public CompareContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.EnterCompare(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.ExitCompare(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRGrammarVisitor<TResult> typedVisitor = visitor as IANTLRGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompare(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParensContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ParensContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.EnterParens(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.ExitParens(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRGrammarVisitor<TResult> typedVisitor = visitor as IANTLRGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParens(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringContext : ExprContext {
		public ITerminalNode STRING() { return GetToken(ANTLRGrammarParser.STRING, 0); }
		public StringContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.ExitString(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRGrammarVisitor<TResult> typedVisitor = visitor as IANTLRGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolContext : ExprContext {
		public ITerminalNode BOOL() { return GetToken(ANTLRGrammarParser.BOOL, 0); }
		public BoolContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.EnterBool(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.ExitBool(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRGrammarVisitor<TResult> typedVisitor = visitor as IANTLRGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBool(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LgNegationContext : ExprContext {
		public IToken op;
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(ANTLRGrammarParser.NOT, 0); }
		public LgNegationContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.EnterLgNegation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.ExitLgNegation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRGrammarVisitor<TResult> typedVisitor = visitor as IANTLRGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLgNegation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignmentContext : ExprContext {
		public ITerminalNode IDENTIFIER() { return GetToken(ANTLRGrammarParser.IDENTIFIER, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AssignmentContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRGrammarVisitor<TResult> typedVisitor = visitor as IANTLRGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalAndContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode LOGICALAND() { return GetToken(ANTLRGrammarParser.LOGICALAND, 0); }
		public LogicalAndContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.EnterLogicalAnd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.ExitLogicalAnd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRGrammarVisitor<TResult> typedVisitor = visitor as IANTLRGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddSubContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode ADD() { return GetToken(ANTLRGrammarParser.ADD, 0); }
		public ITerminalNode SUB() { return GetToken(ANTLRGrammarParser.SUB, 0); }
		public AddSubContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.EnterAddSub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.ExitAddSub(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRGrammarVisitor<TResult> typedVisitor = visitor as IANTLRGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddSub(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ConcatContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode DOT() { return GetToken(ANTLRGrammarParser.DOT, 0); }
		public ConcatContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.EnterConcat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.ExitConcat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRGrammarVisitor<TResult> typedVisitor = visitor as IANTLRGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConcat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FloatContext : ExprContext {
		public ITerminalNode FLOAT() { return GetToken(ANTLRGrammarParser.FLOAT, 0); }
		public FloatContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.EnterFloat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.ExitFloat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRGrammarVisitor<TResult> typedVisitor = visitor as IANTLRGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloat(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MulDivContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode MUL() { return GetToken(ANTLRGrammarParser.MUL, 0); }
		public ITerminalNode DIV() { return GetToken(ANTLRGrammarParser.DIV, 0); }
		public MulDivContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.EnterMulDiv(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.ExitMulDiv(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRGrammarVisitor<TResult> typedVisitor = visitor as IANTLRGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulDiv(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntContext : ExprContext {
		public ITerminalNode INT() { return GetToken(ANTLRGrammarParser.INT, 0); }
		public IntContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.EnterInt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.ExitInt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRGrammarVisitor<TResult> typedVisitor = visitor as IANTLRGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArNegationContext : ExprContext {
		public IToken op;
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode SUB() { return GetToken(ANTLRGrammarParser.SUB, 0); }
		public ArNegationContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.EnterArNegation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.ExitArNegation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRGrammarVisitor<TResult> typedVisitor = visitor as IANTLRGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArNegation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdContext : ExprContext {
		public ITerminalNode IDENTIFIER() { return GetToken(ANTLRGrammarParser.IDENTIFIER, 0); }
		public IdContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.EnterId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.ExitId(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRGrammarVisitor<TResult> typedVisitor = visitor as IANTLRGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitId(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalOrContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode LOGICALOR() { return GetToken(ANTLRGrammarParser.LOGICALOR, 0); }
		public LogicalOrContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.EnterLogicalOr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.ExitLogicalOr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRGrammarVisitor<TResult> typedVisitor = visitor as IANTLRGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ModuloContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode MOD() { return GetToken(ANTLRGrammarParser.MOD, 0); }
		public ModuloContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.EnterModulo(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.ExitModulo(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRGrammarVisitor<TResult> typedVisitor = visitor as IANTLRGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModulo(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode EQUALITY() { return GetToken(ANTLRGrammarParser.EQUALITY, 0); }
		public EqualityContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.EnterEquality(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.ExitEquality(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRGrammarVisitor<TResult> typedVisitor = visitor as IANTLRGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquality(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(_ctx, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 127;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,11,_ctx) ) {
			case 1:
				{
				_localctx = new ArNegationContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				{
				State = 111; ((ArNegationContext)_localctx).op = Match(SUB);
				}
				State = 112; expr(17);
				}
				break;

			case 2:
				{
				_localctx = new LgNegationContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				{
				State = 113; ((LgNegationContext)_localctx).op = Match(NOT);
				}
				State = 114; expr(16);
				}
				break;

			case 3:
				{
				_localctx = new IntContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 115; Match(INT);
				}
				break;

			case 4:
				{
				_localctx = new IdContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 116; Match(IDENTIFIER);
				}
				break;

			case 5:
				{
				_localctx = new FloatContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 117; Match(FLOAT);
				}
				break;

			case 6:
				{
				_localctx = new StringContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 118; Match(STRING);
				}
				break;

			case 7:
				{
				_localctx = new BoolContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 119; Match(BOOL);
				}
				break;

			case 8:
				{
				_localctx = new ParensContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 120; Match(T__2);
				State = 121; expr(0);
				State = 122; Match(T__3);
				}
				break;

			case 9:
				{
				_localctx = new AssignmentContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 124; Match(IDENTIFIER);
				State = 125; Match(ASSIGNMENT);
				State = 126; expr(1);
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 155;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,13,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 153;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,12,_ctx) ) {
					case 1:
						{
						_localctx = new MulDivContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 129;
						if (!(Precpred(_ctx, 15))) throw new FailedPredicateException(this, "Precpred(_ctx, 15)");
						State = 130;
						((MulDivContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==MUL || _la==DIV) ) {
							((MulDivContext)_localctx).op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 131; expr(16);
						}
						break;

					case 2:
						{
						_localctx = new ModuloContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 132;
						if (!(Precpred(_ctx, 14))) throw new FailedPredicateException(this, "Precpred(_ctx, 14)");
						State = 133; Match(MOD);
						State = 134; expr(15);
						}
						break;

					case 3:
						{
						_localctx = new AddSubContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 135;
						if (!(Precpred(_ctx, 13))) throw new FailedPredicateException(this, "Precpred(_ctx, 13)");
						State = 136;
						((AddSubContext)_localctx).op = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==ADD || _la==SUB) ) {
							((AddSubContext)_localctx).op = _errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 137; expr(14);
						}
						break;

					case 4:
						{
						_localctx = new ConcatContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 138;
						if (!(Precpred(_ctx, 12))) throw new FailedPredicateException(this, "Precpred(_ctx, 12)");
						State = 139; Match(DOT);
						State = 140; expr(13);
						}
						break;

					case 5:
						{
						_localctx = new CompareContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 141;
						if (!(Precpred(_ctx, 11))) throw new FailedPredicateException(this, "Precpred(_ctx, 11)");
						{
						State = 142; ((CompareContext)_localctx).op = Match(COMPARER);
						}
						State = 143; expr(12);
						}
						break;

					case 6:
						{
						_localctx = new EqualityContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 144;
						if (!(Precpred(_ctx, 10))) throw new FailedPredicateException(this, "Precpred(_ctx, 10)");
						{
						State = 145; ((EqualityContext)_localctx).op = Match(EQUALITY);
						}
						State = 146; expr(11);
						}
						break;

					case 7:
						{
						_localctx = new LogicalAndContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 147;
						if (!(Precpred(_ctx, 9))) throw new FailedPredicateException(this, "Precpred(_ctx, 9)");
						{
						State = 148; ((LogicalAndContext)_localctx).op = Match(LOGICALAND);
						}
						State = 149; expr(10);
						}
						break;

					case 8:
						{
						_localctx = new LogicalOrContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 150;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						{
						State = 151; ((LogicalOrContext)_localctx).op = Match(LOGICALOR);
						}
						State = 152; expr(9);
						}
						break;
					}
					} 
				}
				State = 157;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,13,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		public IToken type;
		public ITerminalNode INT_KEYWORD() { return GetToken(ANTLRGrammarParser.INT_KEYWORD, 0); }
		public ITerminalNode FLOAT_KEYWORD() { return GetToken(ANTLRGrammarParser.FLOAT_KEYWORD, 0); }
		public ITerminalNode BOOL_KEYWORD() { return GetToken(ANTLRGrammarParser.BOOL_KEYWORD, 0); }
		public ITerminalNode STRING_KEYWORD() { return GetToken(ANTLRGrammarParser.STRING_KEYWORD, 0); }
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.EnterPrimitiveType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IANTLRGrammarListener typedListener = listener as IANTLRGrammarListener;
			if (typedListener != null) typedListener.ExitPrimitiveType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IANTLRGrammarVisitor<TResult> typedVisitor = visitor as IANTLRGrammarVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_primitiveType);
		try {
			State = 162;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case INT_KEYWORD:
				EnterOuterAlt(_localctx, 1);
				{
				State = 158; _localctx.type = Match(INT_KEYWORD);
				}
				break;
			case FLOAT_KEYWORD:
				EnterOuterAlt(_localctx, 2);
				{
				State = 159; _localctx.type = Match(FLOAT_KEYWORD);
				}
				break;
			case BOOL_KEYWORD:
				EnterOuterAlt(_localctx, 3);
				{
				State = 160; _localctx.type = Match(BOOL_KEYWORD);
				}
				break;
			case STRING_KEYWORD:
				EnterOuterAlt(_localctx, 4);
				{
				State = 161; _localctx.type = Match(STRING_KEYWORD);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 4: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 15);

		case 1: return Precpred(_ctx, 14);

		case 2: return Precpred(_ctx, 13);

		case 3: return Precpred(_ctx, 12);

		case 4: return Precpred(_ctx, 11);

		case 5: return Precpred(_ctx, 10);

		case 6: return Precpred(_ctx, 9);

		case 7: return Precpred(_ctx, 8);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3#\xA7\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x3\x2\x6\x2\x10"+
		"\n\x2\r\x2\xE\x2\x11\x3\x3\x3\x3\x3\x3\x3\x3\a\x3\x18\n\x3\f\x3\xE\x3"+
		"\x1B\v\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\a\x3\'\n\x3\f\x3\xE\x3*\v\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\a\x3\x31\n"+
		"\x3\f\x3\xE\x3\x34\v\x3\x3\x3\x3\x3\x3\x3\x3\x3\x6\x3:\n\x3\r\x3\xE\x3"+
		";\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3G\n\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3O\n\x3\x3\x4\x3\x4\x3\x4\x3\x4"+
		"\a\x4U\n\x4\f\x4\xE\x4X\v\x4\x3\x4\x3\x4\x3\x4\x3\x4\a\x4^\n\x4\f\x4\xE"+
		"\x4\x61\v\x4\x3\x4\x5\x4\x64\n\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5"+
		"\x3\x5\x3\x5\x3\x5\x5\x5o\n\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3"+
		"\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6"+
		"\x82\n\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6"+
		"\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3"+
		"\x6\x3\x6\x3\x6\a\x6\x9C\n\x6\f\x6\xE\x6\x9F\v\x6\x3\a\x3\a\x3\a\x3\a"+
		"\x5\a\xA5\n\a\x3\a\x2\x2\x3\n\b\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\x2\x4"+
		"\x3\x2\x15\x16\x3\x2\x17\x18\xC6\x2\xF\x3\x2\x2\x2\x4N\x3\x2\x2\x2\x6"+
		"\x63\x3\x2\x2\x2\bn\x3\x2\x2\x2\n\x81\x3\x2\x2\x2\f\xA4\x3\x2\x2\x2\xE"+
		"\x10\x5\x4\x3\x2\xF\xE\x3\x2\x2\x2\x10\x11\x3\x2\x2\x2\x11\xF\x3\x2\x2"+
		"\x2\x11\x12\x3\x2\x2\x2\x12\x3\x3\x2\x2\x2\x13\x14\x5\f\a\x2\x14\x19\a"+
		"\x1F\x2\x2\x15\x16\a\x11\x2\x2\x16\x18\a\x1F\x2\x2\x17\x15\x3\x2\x2\x2"+
		"\x18\x1B\x3\x2\x2\x2\x19\x17\x3\x2\x2\x2\x19\x1A\x3\x2\x2\x2\x1A\x1C\x3"+
		"\x2\x2\x2\x1B\x19\x3\x2\x2\x2\x1C\x1D\a\x10\x2\x2\x1DO\x3\x2\x2\x2\x1E"+
		"O\a\x10\x2\x2\x1F \x5\n\x6\x2 !\a\x10\x2\x2!O\x3\x2\x2\x2\"#\a\r\x2\x2"+
		"#(\a\x1F\x2\x2$%\a\x11\x2\x2%\'\a\x1F\x2\x2&$\x3\x2\x2\x2\'*\x3\x2\x2"+
		"\x2(&\x3\x2\x2\x2()\x3\x2\x2\x2)+\x3\x2\x2\x2*(\x3\x2\x2\x2+O\a\x10\x2"+
		"\x2,-\a\xE\x2\x2-\x32\x5\n\x6\x2./\a\x11\x2\x2/\x31\x5\n\x6\x2\x30.\x3"+
		"\x2\x2\x2\x31\x34\x3\x2\x2\x2\x32\x30\x3\x2\x2\x2\x32\x33\x3\x2\x2\x2"+
		"\x33\x35\x3\x2\x2\x2\x34\x32\x3\x2\x2\x2\x35\x36\a\x10\x2\x2\x36O\x3\x2"+
		"\x2\x2\x37\x39\a\x3\x2\x2\x38:\x5\x4\x3\x2\x39\x38\x3\x2\x2\x2:;\x3\x2"+
		"\x2\x2;\x39\x3\x2\x2\x2;<\x3\x2\x2\x2<=\x3\x2\x2\x2=>\a\x4\x2\x2>O\x3"+
		"\x2\x2\x2?@\a\v\x2\x2@\x41\a\x5\x2\x2\x41\x42\x5\b\x5\x2\x42\x43\a\x6"+
		"\x2\x2\x43\x46\x5\x4\x3\x2\x44\x45\a\f\x2\x2\x45G\x5\x4\x3\x2\x46\x44"+
		"\x3\x2\x2\x2\x46G\x3\x2\x2\x2GO\x3\x2\x2\x2HI\a\xF\x2\x2IJ\a\x5\x2\x2"+
		"JK\x5\b\x5\x2KL\a\x6\x2\x2LM\x5\x4\x3\x2MO\x3\x2\x2\x2N\x13\x3\x2\x2\x2"+
		"N\x1E\x3\x2\x2\x2N\x1F\x3\x2\x2\x2N\"\x3\x2\x2\x2N,\x3\x2\x2\x2N\x37\x3"+
		"\x2\x2\x2N?\x3\x2\x2\x2NH\x3\x2\x2\x2O\x5\x3\x2\x2\x2PQ\x5\n\x6\x2QR\a"+
		"\x1A\x2\x2RV\x5\n\x6\x2SU\x5\x6\x4\x2TS\x3\x2\x2\x2UX\x3\x2\x2\x2VT\x3"+
		"\x2\x2\x2VW\x3\x2\x2\x2W\x64\x3\x2\x2\x2XV\x3\x2\x2\x2YZ\x5\n\x6\x2Z["+
		"\a\x1B\x2\x2[_\x5\n\x6\x2\\^\x5\x6\x4\x2]\\\x3\x2\x2\x2^\x61\x3\x2\x2"+
		"\x2_]\x3\x2\x2\x2_`\x3\x2\x2\x2`\x64\x3\x2\x2\x2\x61_\x3\x2\x2\x2\x62"+
		"\x64\x5\n\x6\x2\x63P\x3\x2\x2\x2\x63Y\x3\x2\x2\x2\x63\x62\x3\x2\x2\x2"+
		"\x64\a\x3\x2\x2\x2\x65\x66\x5\x6\x4\x2\x66g\a\x1D\x2\x2gh\x5\b\x5\x2h"+
		"o\x3\x2\x2\x2ij\x5\x6\x4\x2jk\a\x1C\x2\x2kl\x5\b\x5\x2lo\x3\x2\x2\x2m"+
		"o\x5\x6\x4\x2n\x65\x3\x2\x2\x2ni\x3\x2\x2\x2nm\x3\x2\x2\x2o\t\x3\x2\x2"+
		"\x2pq\b\x6\x1\x2qr\a\x18\x2\x2r\x82\x5\n\x6\x13st\a\x13\x2\x2t\x82\x5"+
		"\n\x6\x12u\x82\a!\x2\x2v\x82\a\x1F\x2\x2w\x82\a \x2\x2x\x82\a\x1E\x2\x2"+
		"y\x82\a\"\x2\x2z{\a\x5\x2\x2{|\x5\n\x6\x2|}\a\x6\x2\x2}\x82\x3\x2\x2\x2"+
		"~\x7F\a\x1F\x2\x2\x7F\x80\a\x19\x2\x2\x80\x82\x5\n\x6\x3\x81p\x3\x2\x2"+
		"\x2\x81s\x3\x2\x2\x2\x81u\x3\x2\x2\x2\x81v\x3\x2\x2\x2\x81w\x3\x2\x2\x2"+
		"\x81x\x3\x2\x2\x2\x81y\x3\x2\x2\x2\x81z\x3\x2\x2\x2\x81~\x3\x2\x2\x2\x82"+
		"\x9D\x3\x2\x2\x2\x83\x84\f\x11\x2\x2\x84\x85\t\x2\x2\x2\x85\x9C\x5\n\x6"+
		"\x12\x86\x87\f\x10\x2\x2\x87\x88\a\x14\x2\x2\x88\x9C\x5\n\x6\x11\x89\x8A"+
		"\f\xF\x2\x2\x8A\x8B\t\x3\x2\x2\x8B\x9C\x5\n\x6\x10\x8C\x8D\f\xE\x2\x2"+
		"\x8D\x8E\a\x12\x2\x2\x8E\x9C\x5\n\x6\xF\x8F\x90\f\r\x2\x2\x90\x91\a\x1A"+
		"\x2\x2\x91\x9C\x5\n\x6\xE\x92\x93\f\f\x2\x2\x93\x94\a\x1B\x2\x2\x94\x9C"+
		"\x5\n\x6\r\x95\x96\f\v\x2\x2\x96\x97\a\x1D\x2\x2\x97\x9C\x5\n\x6\f\x98"+
		"\x99\f\n\x2\x2\x99\x9A\a\x1C\x2\x2\x9A\x9C\x5\n\x6\v\x9B\x83\x3\x2\x2"+
		"\x2\x9B\x86\x3\x2\x2\x2\x9B\x89\x3\x2\x2\x2\x9B\x8C\x3\x2\x2\x2\x9B\x8F"+
		"\x3\x2\x2\x2\x9B\x92\x3\x2\x2\x2\x9B\x95\x3\x2\x2\x2\x9B\x98\x3\x2\x2"+
		"\x2\x9C\x9F\x3\x2\x2\x2\x9D\x9B\x3\x2\x2\x2\x9D\x9E\x3\x2\x2\x2\x9E\v"+
		"\x3\x2\x2\x2\x9F\x9D\x3\x2\x2\x2\xA0\xA5\a\a\x2\x2\xA1\xA5\a\b\x2\x2\xA2"+
		"\xA5\a\t\x2\x2\xA3\xA5\a\n\x2\x2\xA4\xA0\x3\x2\x2\x2\xA4\xA1\x3\x2\x2"+
		"\x2\xA4\xA2\x3\x2\x2\x2\xA4\xA3\x3\x2\x2\x2\xA5\r\x3\x2\x2\x2\x11\x11"+
		"\x19(\x32;\x46NV_\x63n\x81\x9B\x9D\xA4";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace NewVersion

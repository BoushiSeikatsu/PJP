//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\msi pc\Documents\PythonProjects\PJP\PJProjekt\Cviko7\Expr.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Cviko7 {
using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="ExprParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public interface IExprListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by the <c>singleExpr</c>
	/// labeled alternative in <see cref="ExprParser.condition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSingleExpr([NotNull] ExprParser.SingleExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>singleExpr</c>
	/// labeled alternative in <see cref="ExprParser.condition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSingleExpr([NotNull] ExprParser.SingleExprContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>multipleExprEq</c>
	/// labeled alternative in <see cref="ExprParser.condition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMultipleExprEq([NotNull] ExprParser.MultipleExprEqContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>multipleExprEq</c>
	/// labeled alternative in <see cref="ExprParser.condition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMultipleExprEq([NotNull] ExprParser.MultipleExprEqContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>multipleExprCmp</c>
	/// labeled alternative in <see cref="ExprParser.condition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMultipleExprCmp([NotNull] ExprParser.MultipleExprCmpContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>multipleExprCmp</c>
	/// labeled alternative in <see cref="ExprParser.condition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMultipleExprCmp([NotNull] ExprParser.MultipleExprCmpContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>emptyStatement</c>
	/// labeled alternative in <see cref="ExprParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEmptyStatement([NotNull] ExprParser.EmptyStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>emptyStatement</c>
	/// labeled alternative in <see cref="ExprParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEmptyStatement([NotNull] ExprParser.EmptyStatementContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>writeId</c>
	/// labeled alternative in <see cref="ExprParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWriteId([NotNull] ExprParser.WriteIdContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>writeId</c>
	/// labeled alternative in <see cref="ExprParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWriteId([NotNull] ExprParser.WriteIdContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>readId</c>
	/// labeled alternative in <see cref="ExprParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReadId([NotNull] ExprParser.ReadIdContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>readId</c>
	/// labeled alternative in <see cref="ExprParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReadId([NotNull] ExprParser.ReadIdContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>blockStatements</c>
	/// labeled alternative in <see cref="ExprParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBlockStatements([NotNull] ExprParser.BlockStatementsContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>blockStatements</c>
	/// labeled alternative in <see cref="ExprParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBlockStatements([NotNull] ExprParser.BlockStatementsContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>loopStatement</c>
	/// labeled alternative in <see cref="ExprParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLoopStatement([NotNull] ExprParser.LoopStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>loopStatement</c>
	/// labeled alternative in <see cref="ExprParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLoopStatement([NotNull] ExprParser.LoopStatementContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>declaration</c>
	/// labeled alternative in <see cref="ExprParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDeclaration([NotNull] ExprParser.DeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>declaration</c>
	/// labeled alternative in <see cref="ExprParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDeclaration([NotNull] ExprParser.DeclarationContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>condStatement</c>
	/// labeled alternative in <see cref="ExprParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCondStatement([NotNull] ExprParser.CondStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>condStatement</c>
	/// labeled alternative in <see cref="ExprParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCondStatement([NotNull] ExprParser.CondStatementContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>printExpr</c>
	/// labeled alternative in <see cref="ExprParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPrintExpr([NotNull] ExprParser.PrintExprContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>printExpr</c>
	/// labeled alternative in <see cref="ExprParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPrintExpr([NotNull] ExprParser.PrintExprContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>compare</c>
	/// labeled alternative in <see cref="ExprParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCompare([NotNull] ExprParser.CompareContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>compare</c>
	/// labeled alternative in <see cref="ExprParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCompare([NotNull] ExprParser.CompareContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>parens</c>
	/// labeled alternative in <see cref="ExprParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParens([NotNull] ExprParser.ParensContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>parens</c>
	/// labeled alternative in <see cref="ExprParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParens([NotNull] ExprParser.ParensContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>string</c>
	/// labeled alternative in <see cref="ExprParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterString([NotNull] ExprParser.StringContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>string</c>
	/// labeled alternative in <see cref="ExprParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitString([NotNull] ExprParser.StringContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>bool</c>
	/// labeled alternative in <see cref="ExprParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBool([NotNull] ExprParser.BoolContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>bool</c>
	/// labeled alternative in <see cref="ExprParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBool([NotNull] ExprParser.BoolContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>lgNegation</c>
	/// labeled alternative in <see cref="ExprParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLgNegation([NotNull] ExprParser.LgNegationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>lgNegation</c>
	/// labeled alternative in <see cref="ExprParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLgNegation([NotNull] ExprParser.LgNegationContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>assignment</c>
	/// labeled alternative in <see cref="ExprParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignment([NotNull] ExprParser.AssignmentContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>assignment</c>
	/// labeled alternative in <see cref="ExprParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignment([NotNull] ExprParser.AssignmentContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>logicalAnd</c>
	/// labeled alternative in <see cref="ExprParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLogicalAnd([NotNull] ExprParser.LogicalAndContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>logicalAnd</c>
	/// labeled alternative in <see cref="ExprParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLogicalAnd([NotNull] ExprParser.LogicalAndContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>addSub</c>
	/// labeled alternative in <see cref="ExprParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAddSub([NotNull] ExprParser.AddSubContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>addSub</c>
	/// labeled alternative in <see cref="ExprParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAddSub([NotNull] ExprParser.AddSubContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>float</c>
	/// labeled alternative in <see cref="ExprParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFloat([NotNull] ExprParser.FloatContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>float</c>
	/// labeled alternative in <see cref="ExprParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFloat([NotNull] ExprParser.FloatContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>mulDiv</c>
	/// labeled alternative in <see cref="ExprParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMulDiv([NotNull] ExprParser.MulDivContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>mulDiv</c>
	/// labeled alternative in <see cref="ExprParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMulDiv([NotNull] ExprParser.MulDivContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>int</c>
	/// labeled alternative in <see cref="ExprParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterInt([NotNull] ExprParser.IntContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>int</c>
	/// labeled alternative in <see cref="ExprParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitInt([NotNull] ExprParser.IntContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>arNegation</c>
	/// labeled alternative in <see cref="ExprParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArNegation([NotNull] ExprParser.ArNegationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>arNegation</c>
	/// labeled alternative in <see cref="ExprParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArNegation([NotNull] ExprParser.ArNegationContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>id</c>
	/// labeled alternative in <see cref="ExprParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterId([NotNull] ExprParser.IdContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>id</c>
	/// labeled alternative in <see cref="ExprParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitId([NotNull] ExprParser.IdContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>logicalOr</c>
	/// labeled alternative in <see cref="ExprParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterLogicalOr([NotNull] ExprParser.LogicalOrContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>logicalOr</c>
	/// labeled alternative in <see cref="ExprParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitLogicalOr([NotNull] ExprParser.LogicalOrContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>equality</c>
	/// labeled alternative in <see cref="ExprParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterEquality([NotNull] ExprParser.EqualityContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>equality</c>
	/// labeled alternative in <see cref="ExprParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitEquality([NotNull] ExprParser.EqualityContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>multipleCondsAnd</c>
	/// labeled alternative in <see cref="ExprParser.joinedCondition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMultipleCondsAnd([NotNull] ExprParser.MultipleCondsAndContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>multipleCondsAnd</c>
	/// labeled alternative in <see cref="ExprParser.joinedCondition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMultipleCondsAnd([NotNull] ExprParser.MultipleCondsAndContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>singleCond</c>
	/// labeled alternative in <see cref="ExprParser.joinedCondition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSingleCond([NotNull] ExprParser.SingleCondContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>singleCond</c>
	/// labeled alternative in <see cref="ExprParser.joinedCondition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSingleCond([NotNull] ExprParser.SingleCondContext context);

	/// <summary>
	/// Enter a parse tree produced by the <c>multipleCondsOr</c>
	/// labeled alternative in <see cref="ExprParser.joinedCondition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMultipleCondsOr([NotNull] ExprParser.MultipleCondsOrContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>multipleCondsOr</c>
	/// labeled alternative in <see cref="ExprParser.joinedCondition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMultipleCondsOr([NotNull] ExprParser.MultipleCondsOrContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ExprParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProgram([NotNull] ExprParser.ProgramContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExprParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProgram([NotNull] ExprParser.ProgramContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ExprParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatement([NotNull] ExprParser.StatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExprParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatement([NotNull] ExprParser.StatementContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ExprParser.condition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCondition([NotNull] ExprParser.ConditionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExprParser.condition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCondition([NotNull] ExprParser.ConditionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ExprParser.joinedCondition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterJoinedCondition([NotNull] ExprParser.JoinedConditionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExprParser.joinedCondition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitJoinedCondition([NotNull] ExprParser.JoinedConditionContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ExprParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpr([NotNull] ExprParser.ExprContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExprParser.expr"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpr([NotNull] ExprParser.ExprContext context);

	/// <summary>
	/// Enter a parse tree produced by <see cref="ExprParser.primitiveType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPrimitiveType([NotNull] ExprParser.PrimitiveTypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExprParser.primitiveType"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPrimitiveType([NotNull] ExprParser.PrimitiveTypeContext context);
}
} // namespace Cviko7

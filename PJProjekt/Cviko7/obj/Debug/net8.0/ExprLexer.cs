//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from E:\Python Scripts\PJP_Project\PJProjekt\Cviko7\Expr.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Cviko7 {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class ExprLexer : Lexer {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, INT_KEYWORD=5, FLOAT_KEYWORD=6, BOOL_KEYWORD=7, 
		STRING_KEYWORD=8, IF=9, ELSE=10, READ=11, WRITE=12, WHILE=13, SEMI=14, 
		COMMA=15, DOT=16, NOT=17, MOD=18, MUL=19, DIV=20, ADD=21, SUB=22, ASSIGNMENT=23, 
		COMPARER=24, EQUALITY=25, LOGICALOR=26, LOGICALAND=27, STRING=28, IDENTIFIER=29, 
		FLOAT=30, INT=31, BOOL=32, WS=33;
	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "INT_KEYWORD", "FLOAT_KEYWORD", "BOOL_KEYWORD", 
		"STRING_KEYWORD", "IF", "ELSE", "READ", "WRITE", "WHILE", "SEMI", "COMMA", 
		"DOT", "NOT", "MOD", "MUL", "DIV", "ADD", "SUB", "ASSIGNMENT", "COMPARER", 
		"EQUALITY", "LOGICALOR", "LOGICALAND", "STRING", "IDENTIFIER", "FLOAT", 
		"INT", "BOOL", "WS"
	};


	public ExprLexer(ICharStream input)
		: base(input)
	{
		_interp = new LexerATNSimulator(this,_ATN);
	}

	private static readonly string[] _LiteralNames = {
		null, "'{'", "'}'", "'('", "')'", "'int'", "'float'", "'bool'", "'string'", 
		"'if'", "'else'", "'read'", "'write'", "'while'", "';'", "','", "'.'", 
		"'!'", "'%'", "'*'", "'/'", "'+'", "'-'", "'='", null, null, "'||'", "'&&'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, "INT_KEYWORD", "FLOAT_KEYWORD", "BOOL_KEYWORD", 
		"STRING_KEYWORD", "IF", "ELSE", "READ", "WRITE", "WHILE", "SEMI", "COMMA", 
		"DOT", "NOT", "MOD", "MUL", "DIV", "ADD", "SUB", "ASSIGNMENT", "COMPARER", 
		"EQUALITY", "LOGICALOR", "LOGICALAND", "STRING", "IDENTIFIER", "FLOAT", 
		"INT", "BOOL", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Expr.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x2#\xD0\b\x1\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x3\x2\x3\x2\x3\x3\x3\x3\x3\x4\x3\x4\x3\x5\x3\x5\x3\x6\x3"+
		"\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\b"+
		"\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\x3\v"+
		"\x3\v\x3\f\x3\f\x3\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\x3\r\x3\r\x3\xE\x3"+
		"\xE\x3\xE\x3\xE\x3\xE\x3\xE\x3\xF\x3\xF\x3\x10\x3\x10\x3\x11\x3\x11\x3"+
		"\x12\x3\x12\x3\x13\x3\x13\x3\x14\x3\x14\x3\x15\x3\x15\x3\x16\x3\x16\x3"+
		"\x17\x3\x17\x3\x18\x3\x18\x3\x19\x3\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x5"+
		"\x1A\x97\n\x1A\x3\x1B\x3\x1B\x3\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1D\x3\x1D"+
		"\a\x1D\xA1\n\x1D\f\x1D\xE\x1D\xA4\v\x1D\x3\x1D\x3\x1D\x3\x1E\x3\x1E\a"+
		"\x1E\xAA\n\x1E\f\x1E\xE\x1E\xAD\v\x1E\x3\x1F\x6\x1F\xB0\n\x1F\r\x1F\xE"+
		"\x1F\xB1\x3\x1F\x3\x1F\x6\x1F\xB6\n\x1F\r\x1F\xE\x1F\xB7\x3 \x6 \xBB\n"+
		" \r \xE \xBC\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x3!\x5!\xC8\n!\x3\"\x6\""+
		"\xCB\n\"\r\"\xE\"\xCC\x3\"\x3\"\x3\xA2\x2\x2#\x3\x2\x3\x5\x2\x4\a\x2\x5"+
		"\t\x2\x6\v\x2\a\r\x2\b\xF\x2\t\x11\x2\n\x13\x2\v\x15\x2\f\x17\x2\r\x19"+
		"\x2\xE\x1B\x2\xF\x1D\x2\x10\x1F\x2\x11!\x2\x12#\x2\x13%\x2\x14\'\x2\x15"+
		")\x2\x16+\x2\x17-\x2\x18/\x2\x19\x31\x2\x1A\x33\x2\x1B\x35\x2\x1C\x37"+
		"\x2\x1D\x39\x2\x1E;\x2\x1F=\x2 ?\x2!\x41\x2\"\x43\x2#\x3\x2\a\x4\x2>>"+
		"@@\x4\x2\x43\\\x63|\x5\x2\x32;\x43\\\x63|\x3\x2\x32;\x5\x2\v\f\xF\xF\""+
		"\"\xD7\x2\x3\x3\x2\x2\x2\x2\x5\x3\x2\x2\x2\x2\a\x3\x2\x2\x2\x2\t\x3\x2"+
		"\x2\x2\x2\v\x3\x2\x2\x2\x2\r\x3\x2\x2\x2\x2\xF\x3\x2\x2\x2\x2\x11\x3\x2"+
		"\x2\x2\x2\x13\x3\x2\x2\x2\x2\x15\x3\x2\x2\x2\x2\x17\x3\x2\x2\x2\x2\x19"+
		"\x3\x2\x2\x2\x2\x1B\x3\x2\x2\x2\x2\x1D\x3\x2\x2\x2\x2\x1F\x3\x2\x2\x2"+
		"\x2!\x3\x2\x2\x2\x2#\x3\x2\x2\x2\x2%\x3\x2\x2\x2\x2\'\x3\x2\x2\x2\x2)"+
		"\x3\x2\x2\x2\x2+\x3\x2\x2\x2\x2-\x3\x2\x2\x2\x2/\x3\x2\x2\x2\x2\x31\x3"+
		"\x2\x2\x2\x2\x33\x3\x2\x2\x2\x2\x35\x3\x2\x2\x2\x2\x37\x3\x2\x2\x2\x2"+
		"\x39\x3\x2\x2\x2\x2;\x3\x2\x2\x2\x2=\x3\x2\x2\x2\x2?\x3\x2\x2\x2\x2\x41"+
		"\x3\x2\x2\x2\x2\x43\x3\x2\x2\x2\x3\x45\x3\x2\x2\x2\x5G\x3\x2\x2\x2\aI"+
		"\x3\x2\x2\x2\tK\x3\x2\x2\x2\vM\x3\x2\x2\x2\rQ\x3\x2\x2\x2\xFW\x3\x2\x2"+
		"\x2\x11\\\x3\x2\x2\x2\x13\x63\x3\x2\x2\x2\x15\x66\x3\x2\x2\x2\x17k\x3"+
		"\x2\x2\x2\x19p\x3\x2\x2\x2\x1Bv\x3\x2\x2\x2\x1D|\x3\x2\x2\x2\x1F~\x3\x2"+
		"\x2\x2!\x80\x3\x2\x2\x2#\x82\x3\x2\x2\x2%\x84\x3\x2\x2\x2\'\x86\x3\x2"+
		"\x2\x2)\x88\x3\x2\x2\x2+\x8A\x3\x2\x2\x2-\x8C\x3\x2\x2\x2/\x8E\x3\x2\x2"+
		"\x2\x31\x90\x3\x2\x2\x2\x33\x96\x3\x2\x2\x2\x35\x98\x3\x2\x2\x2\x37\x9B"+
		"\x3\x2\x2\x2\x39\x9E\x3\x2\x2\x2;\xA7\x3\x2\x2\x2=\xAF\x3\x2\x2\x2?\xBA"+
		"\x3\x2\x2\x2\x41\xC7\x3\x2\x2\x2\x43\xCA\x3\x2\x2\x2\x45\x46\a}\x2\x2"+
		"\x46\x4\x3\x2\x2\x2GH\a\x7F\x2\x2H\x6\x3\x2\x2\x2IJ\a*\x2\x2J\b\x3\x2"+
		"\x2\x2KL\a+\x2\x2L\n\x3\x2\x2\x2MN\ak\x2\x2NO\ap\x2\x2OP\av\x2\x2P\f\x3"+
		"\x2\x2\x2QR\ah\x2\x2RS\an\x2\x2ST\aq\x2\x2TU\a\x63\x2\x2UV\av\x2\x2V\xE"+
		"\x3\x2\x2\x2WX\a\x64\x2\x2XY\aq\x2\x2YZ\aq\x2\x2Z[\an\x2\x2[\x10\x3\x2"+
		"\x2\x2\\]\au\x2\x2]^\av\x2\x2^_\at\x2\x2_`\ak\x2\x2`\x61\ap\x2\x2\x61"+
		"\x62\ai\x2\x2\x62\x12\x3\x2\x2\x2\x63\x64\ak\x2\x2\x64\x65\ah\x2\x2\x65"+
		"\x14\x3\x2\x2\x2\x66g\ag\x2\x2gh\an\x2\x2hi\au\x2\x2ij\ag\x2\x2j\x16\x3"+
		"\x2\x2\x2kl\at\x2\x2lm\ag\x2\x2mn\a\x63\x2\x2no\a\x66\x2\x2o\x18\x3\x2"+
		"\x2\x2pq\ay\x2\x2qr\at\x2\x2rs\ak\x2\x2st\av\x2\x2tu\ag\x2\x2u\x1A\x3"+
		"\x2\x2\x2vw\ay\x2\x2wx\aj\x2\x2xy\ak\x2\x2yz\an\x2\x2z{\ag\x2\x2{\x1C"+
		"\x3\x2\x2\x2|}\a=\x2\x2}\x1E\x3\x2\x2\x2~\x7F\a.\x2\x2\x7F \x3\x2\x2\x2"+
		"\x80\x81\a\x30\x2\x2\x81\"\x3\x2\x2\x2\x82\x83\a#\x2\x2\x83$\x3\x2\x2"+
		"\x2\x84\x85\a\'\x2\x2\x85&\x3\x2\x2\x2\x86\x87\a,\x2\x2\x87(\x3\x2\x2"+
		"\x2\x88\x89\a\x31\x2\x2\x89*\x3\x2\x2\x2\x8A\x8B\a-\x2\x2\x8B,\x3\x2\x2"+
		"\x2\x8C\x8D\a/\x2\x2\x8D.\x3\x2\x2\x2\x8E\x8F\a?\x2\x2\x8F\x30\x3\x2\x2"+
		"\x2\x90\x91\t\x2\x2\x2\x91\x32\x3\x2\x2\x2\x92\x93\a?\x2\x2\x93\x97\a"+
		"?\x2\x2\x94\x95\a#\x2\x2\x95\x97\a?\x2\x2\x96\x92\x3\x2\x2\x2\x96\x94"+
		"\x3\x2\x2\x2\x97\x34\x3\x2\x2\x2\x98\x99\a~\x2\x2\x99\x9A\a~\x2\x2\x9A"+
		"\x36\x3\x2\x2\x2\x9B\x9C\a(\x2\x2\x9C\x9D\a(\x2\x2\x9D\x38\x3\x2\x2\x2"+
		"\x9E\xA2\a$\x2\x2\x9F\xA1\v\x2\x2\x2\xA0\x9F\x3\x2\x2\x2\xA1\xA4\x3\x2"+
		"\x2\x2\xA2\xA3\x3\x2\x2\x2\xA2\xA0\x3\x2\x2\x2\xA3\xA5\x3\x2\x2\x2\xA4"+
		"\xA2\x3\x2\x2\x2\xA5\xA6\a$\x2\x2\xA6:\x3\x2\x2\x2\xA7\xAB\t\x3\x2\x2"+
		"\xA8\xAA\t\x4\x2\x2\xA9\xA8\x3\x2\x2\x2\xAA\xAD\x3\x2\x2\x2\xAB\xA9\x3"+
		"\x2\x2\x2\xAB\xAC\x3\x2\x2\x2\xAC<\x3\x2\x2\x2\xAD\xAB\x3\x2\x2\x2\xAE"+
		"\xB0\t\x5\x2\x2\xAF\xAE\x3\x2\x2\x2\xB0\xB1\x3\x2\x2\x2\xB1\xAF\x3\x2"+
		"\x2\x2\xB1\xB2\x3\x2\x2\x2\xB2\xB3\x3\x2\x2\x2\xB3\xB5\a\x30\x2\x2\xB4"+
		"\xB6\t\x5\x2\x2\xB5\xB4\x3\x2\x2\x2\xB6\xB7\x3\x2\x2\x2\xB7\xB5\x3\x2"+
		"\x2\x2\xB7\xB8\x3\x2\x2\x2\xB8>\x3\x2\x2\x2\xB9\xBB\t\x5\x2\x2\xBA\xB9"+
		"\x3\x2\x2\x2\xBB\xBC\x3\x2\x2\x2\xBC\xBA\x3\x2\x2\x2\xBC\xBD\x3\x2\x2"+
		"\x2\xBD@\x3\x2\x2\x2\xBE\xBF\av\x2\x2\xBF\xC0\at\x2\x2\xC0\xC1\aw\x2\x2"+
		"\xC1\xC8\ag\x2\x2\xC2\xC3\ah\x2\x2\xC3\xC4\a\x63\x2\x2\xC4\xC5\an\x2\x2"+
		"\xC5\xC6\au\x2\x2\xC6\xC8\ag\x2\x2\xC7\xBE\x3\x2\x2\x2\xC7\xC2\x3\x2\x2"+
		"\x2\xC8\x42\x3\x2\x2\x2\xC9\xCB\t\x6\x2\x2\xCA\xC9\x3\x2\x2\x2\xCB\xCC"+
		"\x3\x2\x2\x2\xCC\xCA\x3\x2\x2\x2\xCC\xCD\x3\x2\x2\x2\xCD\xCE\x3\x2\x2"+
		"\x2\xCE\xCF\b\"\x2\x2\xCF\x44\x3\x2\x2\x2\v\x2\x96\xA2\xAB\xB1\xB7\xBC"+
		"\xC7\xCC\x3\b\x2\x2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Cviko7
